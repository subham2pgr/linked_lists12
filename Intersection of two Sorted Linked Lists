#include <iostream>

using namespace std;
struct Node
{
    int data;
    struct Node* next;
};

struct Node *newNode(int data){
    struct Node* new_node=(struct Node*)malloc(sizeof(struct Node));
    new_node->data=data;
    new_node->next=NULL;
    return new_node;
}
void push(struct Node** head_ref,int data){
     struct Node* new_node=newNode(data);
     new_node->next=(*head_ref);
     (*head_ref)=new_node;
}
int search(struct Node* list2,int da){
    while(list2!=NULL){
        if(list2->data==da){
            return 1;
        }
        list2=list2->next;
    }
    return 0;
}
struct Node* intersection(struct Node* list1,struct Node* list2){
    struct Node* res=NULL;
    while(list1!=NULL){
        if(search(list2,list1->data)){
            push(&res,list1->data);
        }
        list1=list1->next;
    }
    return res;
}
/* Driver code*/
int main()
{
    struct Node* list1=NULL;
    struct Node* list2=NULL;
    struct Node* list3=NULL;
    
    push(&list1,6);
    push(&list1,4);
    push(&list1,3);
    push(&list1,2);
    
    push(&list2,8);
    push(&list2,6);
    push(&list2,3);
    push(&list2,1);
    
    list3=intersection(list1,list2);
    cout<<"Linked list1\n";
    while(list1!=NULL)
    {
        cout<<list1->data<<" ";
        list1=list1->next;
    }
    cout<<"\nLinked List 2\n";
    while(list2!=NULL)
    {
        cout<<list2->data<<" ";
        list2=list2->next;
    }
    cout<<"\nIntersection\n";
    while(list3!=NULL)
    {
        cout<<list3->data<<" ";
        list3=list3->next;
    }
    
    
    return 0;
    
}

Method 3 (Recursive)
Below is the recursive implementation of sortedIntersect().

filter_none
edit
play_arrow

brightness_4
#include<stdio.h> 
#include<stdlib.h> 
  
/* Link list node */
struct Node 
{ 
    int data; 
    struct Node* next; 
}; 
  
struct Node *sortedIntersect(struct Node *a, struct Node *b) 
{ 
    /* base case */
    if (a == NULL || b == NULL) 
        return NULL; 
  
    /* If both lists are non-empty */
  
    /* advance the smaller list and call recursively */
    if (a->data < b->data) 
        return sortedIntersect(a->next, b); 
  
    if (a->data > b->data) 
        return sortedIntersect(a, b->next); 
  
    // Below lines are executed only when a->data == b->data 
    struct Node *temp = (struct Node *)malloc(sizeof(struct Node)); 
    temp->data = a->data; 
  
    /* advance both lists and call recursively */
    temp->next = sortedIntersect(a->next, b->next); 
    return temp; 
} 
  
/* UTILITY FUNCTIONS */
/* Function to insert a node at the beginging of the linked list */
void push(struct Node** head_ref, int new_data) 
{ 
    /* allocate node */
    struct Node* new_node = (struct Node*) malloc(sizeof(struct Node)); 
  
    /* put in the data  */
    new_node->data  = new_data; 
  
    /* link the old list off the new node */
    new_node->next = (*head_ref); 
  
    /* move the head to point to the new node */
    (*head_ref)    = new_node; 
} 
  
/* Function to print nodes in a given linked list */
void printList(struct Node *node) 
{ 
    while (node != NULL) 
    { 
        printf("%d ", node->data); 
        node = node->next; 
    } 
} 
  
/* Drier program to test above functions*/
int main() 
{ 
    /* Start with the empty lists */
    struct Node* a = NULL; 
    struct Node* b = NULL; 
    struct Node *intersect = NULL; 
  
    /* Let us create the first sorted linked list to test the functions 
     Created linked list will be 1->2->3->4->5->6 */
    push(&a, 6); 
    push(&a, 5); 
    push(&a, 4); 
    push(&a, 3); 
    push(&a, 2); 
    push(&a, 1); 
  
    /* Let us create the second sorted linked list 
     Created linked list will be 2->4->6->8 */
    push(&b, 8); 
    push(&b, 6); 
    push(&b, 4); 
    push(&b, 2); 
  
    /* Find the intersection two linked lists */
    intersect = sortedIntersect(a, b); 
  
    printf("\n Linked list containing common items of a & b \n "); 
    printList(intersect); 
  
    return 0; 
} 
Time Complexity: O(m+n) where m and n are number of nodes in first and second linked lists respectively.
