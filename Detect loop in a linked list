#include <iostream>

using namespace std;
class Node
{
    public:
    int data;
    Node* next;
};
int detectLoop(Node *head){
    Node *slow_ptr=head;
    Node *fast_ptr=head;
    while(slow_ptr!=NULL && fast_ptr!=NULL && fast_ptr->next!=NULL  ){
        slow_ptr = slow_ptr->next;
        fast_ptr = fast_ptr->next->next;
        if(slow_ptr==fast_ptr){
            return 1;
        }
        
    }
    return 0;
}
  
  
void push(Node** head_ref, int new_data)  
{  
    /* allocate node */
    Node* new_node = new Node(); 
  
    /* put in the data */
    new_node->data = new_data;  
  
    /* link the old list off the new node */
    new_node->next = (*head_ref);  
  
    /* move the head to point to the new node */
    (*head_ref) = new_node;  
}  
  
/* Function to print nodes in a given linked list */
void printList(Node *node)  
{  
    while (node != NULL)  
    {  
        cout << node->data <<" ";  
        node = node->next;  
    }  
}  
  
/* Driver code*/
int main() 
{ 
    /* Start with the empty list */
   Node* head = NULL; 
  
    push(&head, 20); 
    push(&head, 4); 
    push(&head, 15); 
    push(&head, 10); 
  
    /* Create a loop for testing */
    head->next->next->next->next = head; 
  
    if (detectLoop(head)) 
        cout << "Loop found"; 
    else
        cout << "No Loop"; 
  
    return 0; 
} 
