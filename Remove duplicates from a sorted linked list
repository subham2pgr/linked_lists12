class Node  
{  
    public: 
    int data;  
    Node* next;  
};  

void removeDuplicates(Node* head)  
{
    Node* current = head;
    Node* to_free = NULL;
    while(current!=NULL&&current->next!=NULL)
    {
        if(current->data==current->next->data){
            to_free=current->next;
            current->next=current->next->next;
            free(to_free);
        }
        else{
            current=current->next;
        }
    }
}
void push(Node** head_ref, int new_data)  
{  
    /* allocate node */
    Node* new_node = new Node(); 
              
    /* put in the data */
    new_node->data = new_data;  
                  
    /* link the old list off the new node */
    new_node->next = (*head_ref);      
          
    /* move the head to point to the new node */
    (*head_ref) = new_node;  
}  
  
/* Function to print nodes in a given linked list */
void printList(Node *node)  
{  
    while (node!=NULL)  
    {  
        cout<<" "<<node->data;  
        node = node->next;  
    }  
}  
  
/* Drier program to test above functions*/
int main()  
{  
    /* Start with the empty list */
    Node* head = NULL;  
      
    /* Let us create a sorted linked list to test the functions  
    Created linked list will be 11->11->11->13->13->20 */
    push(&head, 20);  
    push(&head, 13);  
    push(&head, 13);  
    push(&head, 11);  
    push(&head, 11);  
    push(&head, 11);                                      
  
    cout<<"Linked list before duplicate removal ";  
    printList(head);  
  
    /* Remove duplicates from linked list */
    removeDuplicates(head);  
  
    cout<<"\nLinked list after duplicate removal ";      
    printList(head);              
      
    return 0;  
}  
